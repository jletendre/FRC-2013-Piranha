// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3532.PiranhaEnergy.commands;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3532.PiranhaEnergy.Robot;
/**
 *
 */
public class  ShootDisk extends Command {
    double pushTime;
    double pushSpeed;
    double returnTime;
    double returnSpeed;
    int step;
    
    public ShootDisk() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.canon);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        pushTime = Preferences.getInstance().getDouble("PushDiskTime", 0.5);
        pushSpeed = Preferences.getInstance().getDouble("PushDiskSpeed", 0.7);
        returnTime = Preferences.getInstance().getDouble("ReturnTime", 0.7);
        returnSpeed = Preferences.getInstance().getDouble("ReturnSpeed", 0.3);
        step = 0;
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        if(step == 0)
        {
            Robot.canon.pushLaunchArm(pushSpeed);
            System.out.print("Pushing for ");
            System.out.println(pushTime);
            Timer.delay(pushTime);
            Robot.canon.returnLaunchArm(returnSpeed);
            System.out.print("Pulling for ");
            System.out.println(returnTime);
            setTimeout(returnTime);
            step = 1;
        }
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return isTimedOut();
    }
    // Called once after isFinished returns true
    protected void end() {
        Robot.canon.stopLaunchArm();
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
