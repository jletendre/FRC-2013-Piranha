// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3532.PiranhaEnergy;
import org.usfirst.frc3532.PiranhaEnergy.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;
import edu.wpi.first.wpilibj.command.Scheduler;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton loadDiskButton;
    public JoystickButton shootButton;
    public JoystickButton raiseCameraButton;
    public JoystickButton lowerCameraButton;
    public JoystickButton increaseWheelSpeedButton;
    public JoystickButton decreaseWheelSpeedButton;
    public Joystick joystickRight;
    public JoystickButton raiseCanonButton;
    public JoystickButton lowerCanonButton;
    public JoystickButton startWheelButton;
    public JoystickButton stopWheelButton;
    public Joystick joystickLeft;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        joystickLeft = new Joystick(1);
        
        stopWheelButton = new JoystickButton(joystickLeft, 4);
        stopWheelButton.whenPressed(new StopLaunchWheels());
        startWheelButton = new JoystickButton(joystickLeft, 5);
        startWheelButton.whenPressed(new SpinLaunchWheels());
        lowerCanonButton = new JoystickButton(joystickLeft, 2);
        lowerCanonButton.whileHeld(new LowerCanon());
        raiseCanonButton = new JoystickButton(joystickLeft, 3);
        raiseCanonButton.whileHeld(new RaiseCanon());
        joystickRight = new Joystick(2);
        
        decreaseWheelSpeedButton = new JoystickButton(joystickRight, 4);
        decreaseWheelSpeedButton.whenPressed(new DecreaseWheelSpeed());
        increaseWheelSpeedButton = new JoystickButton(joystickRight, 5);
        increaseWheelSpeedButton.whenPressed(new IncreaseWheelSpeed());
        lowerCameraButton = new JoystickButton(joystickRight, 2);
        lowerCameraButton.whenPressed(new LowerCamera());
        raiseCameraButton = new JoystickButton(joystickRight, 3);
        raiseCameraButton.whenPressed(new RaiseCamera());
        shootButton = new JoystickButton(joystickRight, 1);
        shootButton.whenPressed(new ShootDisk());
        loadDiskButton = new JoystickButton(joystickRight, 4);
        loadDiskButton.whenPressed(new LoadDisk());
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("DriveWithJoystick", new DriveWithJoystick());
        SmartDashboard.putData("SpinLaunchWheels", new SpinLaunchWheels());
        SmartDashboard.putData("StopLaunchWheels", new StopLaunchWheels());
        SmartDashboard.putData("LoadDisk", new LoadDisk());
        SmartDashboard.putData("ShootDisk", new ShootDisk());
        SmartDashboard.putData("RaiseCanon", new RaiseCanon());
        SmartDashboard.putData("LowerCanon", new LowerCanon());
        SmartDashboard.putData("RaiseCamera", new RaiseCamera());
        SmartDashboard.putData("LowerCamera", new LowerCamera());
        SmartDashboard.putData("Autonomous", new Autonomous());
        SmartDashboard.putData("IncreaseWheelSpeed", new IncreaseWheelSpeed());
        SmartDashboard.putData("DecreaseWheelSpeed", new DecreaseWheelSpeed());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystickRight() {
        return joystickRight;
    }
    public Joystick getJoystickLeft() {
        return joystickLeft;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
